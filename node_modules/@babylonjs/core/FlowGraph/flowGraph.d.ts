import type { Scene } from "../scene";
import type { FlowGraphEventBlock } from "./flowGraphEventBlock";
import { FlowGraphVariableDefinitions } from "./flowGraphVariableDefinitions";
import type { FlowGraphContext } from "./flowGraphContext";
import type { FlowGraphEventCoordinator } from "./flowGraphEventCoordinator";
export declare enum FlowGraphState {
    /**
     * The graph is stopped
     */
    Stopped = 0,
    /**
     * The graph is running
     */
    Started = 1
}
/**
 * @experimental
 * Parameters used to create a flow graph.
 */
export interface FlowGraphParams {
    /**
     * The scene that the flow graph belongs to.
     */
    scene: Scene;
    /**
     * The event coordinator used by the flow graph.
     */
    eventCoordinator: FlowGraphEventCoordinator;
}
/**
 * @experimental
 * Class used to represent a flow graph.
 * A flow graph is a graph of blocks that can be used to create complex logic.
 * Blocks can be added to the graph and connected to each other.
 * The graph can then be started, which will init and start all of its event blocks.
 */
export declare class FlowGraph {
    /**
     * The variables defined for this graph
     */
    variableDefinitions: FlowGraphVariableDefinitions;
    private _eventBlocks;
    private _sceneDisposeObserver;
    /**
     * @internal
     */
    readonly _scene: Scene;
    private _eventCoordinator;
    private _executionContexts;
    /**
     * The state of the graph
     */
    state: FlowGraphState;
    /**
     * Construct a Flow Graph
     * @param params construction parameters. currently only the scene
     */
    constructor(params: FlowGraphParams);
    /**
     * Create a context. A context represents one self contained execution for the graph, with its own variables.
     * @returns the context, where you can get and set variables
     */
    createContext(): FlowGraphContext;
    /**
     * Add an event block. When the graph is started, it will start listening to events
     * from the block and execute the graph when they are triggered.
     * @param block
     */
    addEventBlock(block: FlowGraphEventBlock): void;
    /**
     * Starts the flow graph. Initializes the event blocks and starts listening to events.
     */
    start(): void;
    /**
     * Disposes of the flow graph. Cancels any pending tasks and removes all event listeners.
     */
    dispose(): void;
}
