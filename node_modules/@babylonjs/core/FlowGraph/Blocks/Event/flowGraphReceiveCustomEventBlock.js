import { FlowGraphEventBlock } from "../../flowGraphEventBlock.js";
import { Tools } from "../../../Misc/tools.js";
import { RichTypeAny } from "../../flowGraphRichTypes.js";
/**
 * @experimental
 * A block that receives a custom event. It saves the data sent in the eventData output.
 */
export class FlowGraphReceiveCustomEventBlock extends FlowGraphEventBlock {
    constructor(_params) {
        super();
        this._params = _params;
        this.eventData = this._registerDataOutput("eventData", RichTypeAny);
    }
    _preparePendingTasks(context) {
        const observable = context.graphVariables.eventCoordinator.getCustomEventObservable(this._params.eventId);
        this._eventObserver = observable.add((eventData) => {
            this.eventData.setValue(eventData, context);
            this._execute(context);
        });
    }
    _cancelPendingTasks(context) {
        const observable = context.graphVariables.eventCoordinator.getCustomEventObservable(this._params.eventId);
        if (observable) {
            observable.remove(this._eventObserver);
        }
        else {
            Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this._params.eventId}`);
        }
    }
}
//# sourceMappingURL=flowGraphReceiveCustomEventBlock.js.map