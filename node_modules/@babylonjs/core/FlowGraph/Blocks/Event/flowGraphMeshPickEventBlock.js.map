{"version":3,"file":"flowGraphMeshPickEventBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphMeshPickEventBlock.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAChE,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AASlE;;;GAGG;AACH,MAAM,OAAO,2BAA4B,SAAQ,mBAAmB;IAGhE,YAAmB,MAAgC;QAC/C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,gBAAgB,CAAC;IACrD,CAAC;IAED;;OAEG;IACI,oBAAoB,CAAC,OAAyB;QACjD,IAAI,YAAY,GAAG,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;QAC3E,IAAI,CAAC,YAAY,EAAE;YACf,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAiB,CAAC;YACzE,YAAY,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE;;gBACnE,IAAI,WAAW,CAAC,IAAI,KAAK,iBAAiB,CAAC,WAAW,IAAI,CAAA,MAAA,WAAW,CAAC,QAAQ,0CAAE,UAAU,MAAK,IAAI,EAAE;oBACjG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;iBAC1B;YACL,CAAC,CAAC,CAAC;YACH,MAAM,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC5E,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,kBAAkB,EAAE,YAAY,CAAC,CAAC;YACtE,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,qBAAqB,EAAE,eAAe,CAAC,CAAC;SAC/E;IACL,CAAC;IAEM,UAAU,CAAC,OAAyB;QACvC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAClC,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACI,mBAAmB,CAAC,OAAyB;QAChD,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAiB,CAAC;QACzE,MAAM,YAAY,GAAG,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;QAC7E,MAAM,eAAe,GAAG,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;QAEnF,IAAI,CAAC,QAAQ,EAAE,CAAC,mBAAmB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACzD,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAEjD,OAAO,CAAC,wBAAwB,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;QAC3D,OAAO,CAAC,wBAAwB,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;IAClE,CAAC;CACJ","sourcesContent":["import type { AbstractMesh } from \"../../../Meshes/abstractMesh\";\r\nimport { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport { PointerEventTypes } from \"../../../Events/pointerEvents\";\r\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\n\r\n/**\r\n * @experimental\r\n */\r\nexport interface IFlowGraphMeshPickParams {\r\n    meshVariableName: string;\r\n}\r\n/**\r\n * @experimental\r\n * A block that activates when a mesh is picked.\r\n */\r\nexport class FlowGraphMeshPickEventBlock extends FlowGraphEventBlock {\r\n    private _meshVariableName: string;\r\n\r\n    public constructor(params: IFlowGraphMeshPickParams) {\r\n        super();\r\n        this._meshVariableName = params.meshVariableName;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        let pickObserver = context._getExecutionVariable(this, \"meshPickObserver\");\r\n        if (!pickObserver) {\r\n            const mesh = context.getVariable(this._meshVariableName) as AbstractMesh;\r\n            pickObserver = mesh.getScene().onPointerObservable.add((pointerInfo) => {\r\n                if (pointerInfo.type === PointerEventTypes.POINTERPICK && pointerInfo.pickInfo?.pickedMesh === mesh) {\r\n                    this._execute(context);\r\n                }\r\n            });\r\n            const disposeObserver = mesh.onDisposeObservable.add(() => this._onDispose);\r\n            context._setExecutionVariable(this, \"meshPickObserver\", pickObserver);\r\n            context._setExecutionVariable(this, \"meshDisposeObserver\", disposeObserver);\r\n        }\r\n    }\r\n\r\n    public _onDispose(context: FlowGraphContext) {\r\n        this._cancelPendingTasks(context);\r\n        context._removePendingBlock(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cancelPendingTasks(context: FlowGraphContext): void {\r\n        const mesh = context.getVariable(this._meshVariableName) as AbstractMesh;\r\n        const pickObserver = context._getExecutionVariable(this, \"meshPickObserver\");\r\n        const disposeObserver = context._getExecutionVariable(this, \"meshDisposeObserver\");\r\n\r\n        mesh.getScene().onPointerObservable.remove(pickObserver);\r\n        mesh.onDisposeObservable.remove(disposeObserver);\r\n\r\n        context._deleteExecutionVariable(this, \"meshPickObserver\");\r\n        context._deleteExecutionVariable(this, \"meshDisposeObserver\");\r\n    }\r\n}\r\n"]}