import { FlowGraphEventBlock } from "../../flowGraphEventBlock.js";
import { PointerEventTypes } from "../../../Events/pointerEvents.js";
/**
 * @experimental
 * A block that activates when a mesh is picked.
 */
export class FlowGraphMeshPickEventBlock extends FlowGraphEventBlock {
    constructor(params) {
        super();
        this._meshVariableName = params.meshVariableName;
    }
    /**
     * @internal
     */
    _preparePendingTasks(context) {
        let pickObserver = context._getExecutionVariable(this, "meshPickObserver");
        if (!pickObserver) {
            const mesh = context.getVariable(this._meshVariableName);
            pickObserver = mesh.getScene().onPointerObservable.add((pointerInfo) => {
                var _a;
                if (pointerInfo.type === PointerEventTypes.POINTERPICK && ((_a = pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) === mesh) {
                    this._execute(context);
                }
            });
            const disposeObserver = mesh.onDisposeObservable.add(() => this._onDispose);
            context._setExecutionVariable(this, "meshPickObserver", pickObserver);
            context._setExecutionVariable(this, "meshDisposeObserver", disposeObserver);
        }
    }
    _onDispose(context) {
        this._cancelPendingTasks(context);
        context._removePendingBlock(this);
    }
    /**
     * @internal
     */
    _cancelPendingTasks(context) {
        const mesh = context.getVariable(this._meshVariableName);
        const pickObserver = context._getExecutionVariable(this, "meshPickObserver");
        const disposeObserver = context._getExecutionVariable(this, "meshDisposeObserver");
        mesh.getScene().onPointerObservable.remove(pickObserver);
        mesh.onDisposeObservable.remove(disposeObserver);
        context._deleteExecutionVariable(this, "meshPickObserver");
        context._deleteExecutionVariable(this, "meshDisposeObserver");
    }
}
//# sourceMappingURL=flowGraphMeshPickEventBlock.js.map