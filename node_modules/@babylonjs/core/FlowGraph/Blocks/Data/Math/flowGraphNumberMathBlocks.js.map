{"version":3,"file":"flowGraphNumberMathBlocks.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Math/flowGraphNumberMathBlocks.ts"],"names":[],"mappings":"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","sourcesContent":["import { FlowGraphBlock } from \"../../../flowGraphBlock\";\r\nimport { RichTypeBoolean, RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { FlowGraphConstantOperationBlock } from \"../flowGraphConstantOperationBlock\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\n\r\n/**\r\n * Module for all of the number math blocks.\r\n * @see https://docs.google.com/spreadsheets/d/1wSFUFLPpRFVlL-va3YtYC6sepNvPapVawG1-nzoTF34/edit#gid=0\r\n */\r\n\r\n/**\r\n * Outputs the addition of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphAddNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left + right);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the subtraction of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphSubtractNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left - right);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the multiplication of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphMultiplyNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left * right);\r\n    }\r\n}\r\n\r\n/**\r\n * Ouputs the division of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphDivideNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left / right);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the modulo of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphModNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left % right);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs left to the power of right.\r\n * @experimental\r\n */\r\nexport class FlowGraphPowNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.pow(left, right));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs true if the number is NaN, false otherwise.\r\n * @experimental\r\n */\r\nexport class FlowGraphIsNaNNumberBlock extends FlowGraphUnaryOperationBlock<number, boolean> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeBoolean, (input) => isNaN(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs true if the number is infinite, false otherwise.\r\n * @experimental\r\n */\r\nexport class FlowGraphIsInfinityNumberBlock extends FlowGraphUnaryOperationBlock<number, boolean> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeBoolean, (input) => !isFinite(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the square root of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphSqrtNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.sqrt(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the absolute value of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphAbsNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.abs(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Negates the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphNegateNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => -input);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the floor of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphFloorNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.floor(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the ceiling of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphCeilNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.ceil(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Rounds the left input to right digits of precision.\r\n * @see rounding function from: https://docs.google.com/spreadsheets/d/1wSFUFLPpRFVlL-va3YtYC6sepNvPapVawG1-nzoTF34/edit#gid=0\r\n * @experimental\r\n */\r\nexport class FlowGraphRoundNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (input, digits) => Math.round(input / Math.pow(10, digits)) / Math.pow(10, digits));\r\n    }\r\n}\r\n\r\n/**\r\n * Truncates the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphTruncNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.trunc(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the exponential of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphExpNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.exp(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the base 10 logarithm of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphLog10NumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.log10(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the natural logarithm of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphLogNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.log(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the base 2 logarithm of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphLnNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.log(input) / Math.LN2);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the sine of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphSinNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.sin(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the cosine of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphCosNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.cos(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the tangent of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphTanNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.tan(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the arcsine of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphASinNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.asin(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the arccosine of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphACosNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.acos(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the arctangent of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphATanNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.atan(input));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the number E.\r\n * @experimental\r\n */\r\nexport class FlowGraphENumberBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor() {\r\n        super(RichTypeNumber, () => Math.E);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the number PI.\r\n * @experimental\r\n */\r\nexport class FlowGraphPiNumberBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor() {\r\n        super(RichTypeNumber, () => Math.PI);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the arctan2 of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphATan2NumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.atan2(left, right));\r\n    }\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Outputs a number between left and right.\r\n */\r\nexport class FlowGraphRandomNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left + Math.random() * (right - left));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the minimum of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphMinNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.min(left, right));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs the maximum of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphMaxNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.max(left, right));\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs true if left is equal to right, false otherwise.\r\n * @experimental\r\n */\r\nexport class FlowGraphEqualsNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left === right);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs true if left is greater than right, false otherwise.\r\n */\r\nexport class FlowGraphGreaterThanNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left > right);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs true if left is greater than or equal to right, false otherwise.\r\n */\r\nexport class FlowGraphGreaterThanOrEqualsNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left >= right);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs true if left is less than right, false otherwise.\r\n */\r\nexport class FlowGraphLessThanNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left < right);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs true if left is less than or equal to right, false otherwise.\r\n */\r\nexport class FlowGraphLessThanOrEqualsNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left <= right);\r\n    }\r\n}\r\n\r\n/**\r\n * Outputs a mix of left and right based on alpha.\r\n * @experimental\r\n */\r\nexport class FlowGraphMixNumberBlock extends FlowGraphBlock {\r\n    public leftInput: FlowGraphDataConnection<number>;\r\n    public rightInput: FlowGraphDataConnection<number>;\r\n    public alphaInput: FlowGraphDataConnection<number>;\r\n\r\n    public resultOutput: FlowGraphDataConnection<number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.leftInput = this._registerDataInput(\"leftInput\", RichTypeNumber);\r\n        this.rightInput = this._registerDataInput(\"rightInput\", RichTypeNumber);\r\n        this.alphaInput = this._registerDataInput(\"alphaInput\", RichTypeNumber);\r\n        this.resultOutput = this._registerDataOutput(\"resultOutput\", RichTypeNumber);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const left = this.leftInput.getValue(_context);\r\n        const right = this.rightInput.getValue(_context);\r\n        const alpha = this.alphaInput.getValue(_context);\r\n        const mix = left + (right - left) * alpha;\r\n        this.resultOutput.setValue(mix, _context);\r\n    }\r\n}\r\n"]}