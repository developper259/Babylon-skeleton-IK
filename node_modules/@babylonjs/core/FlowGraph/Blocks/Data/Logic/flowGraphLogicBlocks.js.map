{"version":3,"file":"flowGraphLogicBlocks.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Logic/flowGraphLogicBlocks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,uCAA0C;AACpE,OAAO,EAAE,6BAA6B,EAAE,MAAM,kCAAkC,CAAC;AACjF,OAAO,EAAE,4BAA4B,EAAE,MAAM,iCAAiC,CAAC;AAE/E;;;GAGG;AACH,MAAM,OAAO,sBAAuB,SAAQ,6BAAwD;IAChG;QACI,KAAK,CAAC,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC;IAC7F,CAAC;CACJ;AAED;;;GAGG;AACH,MAAM,OAAO,qBAAsB,SAAQ,6BAAwD;IAC/F;QACI,KAAK,CAAC,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC;IAC7F,CAAC;CACJ;AAED;;;GAGG;AACH,MAAM,OAAO,sBAAuB,SAAQ,4BAA8C;IACtF;QACI,KAAK,CAAC,eAAe,EAAE,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;IAC/D,CAAC;CACJ","sourcesContent":["import { RichTypeBoolean } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\n\r\n/**\r\n * Performs an AND operation on two boolean values.\r\n * @experimental\r\n */\r\nexport class FlowGraphLogicAndBlock extends FlowGraphBinaryOperationBlock<boolean, boolean, boolean> {\r\n    constructor() {\r\n        super(RichTypeBoolean, RichTypeBoolean, RichTypeBoolean, (left, right) => left && right);\r\n    }\r\n}\r\n\r\n/**\r\n * Performs an OR operation on two boolean values.\r\n * @experimental\r\n */\r\nexport class FlowGraphLogicOrBlock extends FlowGraphBinaryOperationBlock<boolean, boolean, boolean> {\r\n    constructor() {\r\n        super(RichTypeBoolean, RichTypeBoolean, RichTypeBoolean, (left, right) => left || right);\r\n    }\r\n}\r\n\r\n/**\r\n * Performs a NOT operation on a boolean value\r\n * @experimental\r\n */\r\nexport class FlowGraphLogicNotBlock extends FlowGraphUnaryOperationBlock<boolean, boolean> {\r\n    constructor() {\r\n        super(RichTypeBoolean, RichTypeBoolean, (value) => !value);\r\n    }\r\n}\r\n"]}