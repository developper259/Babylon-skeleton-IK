{"version":3,"file":"flowGraphBitwiseBlocks.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Logic/flowGraphBitwiseBlocks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAC7D,OAAO,EAAE,6BAA6B,EAAE,MAAM,kCAAkC,CAAC;AACjF,OAAO,EAAE,4BAA4B,EAAE,MAAM,iCAAiC,CAAC;AAE/E;;;GAGG;AACH,MAAM,OAAO,wBAAyB,SAAQ,6BAAqD;IAC/F;QACI,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;IACzF,CAAC;CACJ;AAED;;;GAGG;AACH,MAAM,OAAO,uBAAwB,SAAQ,6BAAqD;IAC9F;QACI,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;IACzF,CAAC;CACJ;AAED;;;GAGG;AACH,MAAM,OAAO,wBAAyB,SAAQ,6BAAqD;IAC/F;QACI,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;IACzF,CAAC;CACJ;AAED;;;GAGG;AACH,MAAM,OAAO,wBAAyB,SAAQ,4BAA4C;IACtF;QACI,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;IAC7D,CAAC;CACJ;AAED;;;GAGG;AACH,MAAM,OAAO,8BAA+B,SAAQ,6BAAqD;IACrG;QACI,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC;IAC1F,CAAC;CACJ;AAED;;;GAGG;AACH,MAAM,OAAO,+BAAgC,SAAQ,6BAAqD;IACtG;QACI,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC;IAC1F,CAAC;CACJ;AAED;;;GAGG;AACH,MAAM,OAAO,+BAAgC,SAAQ,4BAA4C;IAC7F;QACI,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IACxE,CAAC;CACJ;AAED;;;GAGG;AACH,MAAM,OAAO,gCAAiC,SAAQ,4BAA4C;IAC9F,+IAA+I;IACvI,KAAK,CAAC,OAAe;QACzB,OAAO,MAAM,CAAC,CAAC,CAAC,mBAAmB;QACnC,IAAI,OAAO,KAAK,CAAC,EAAE;YACf,6CAA6C;YAC7C,OAAO,EAAE,CAAC;SACb;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,yCAAyC;QAC9D,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;QACI,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IACxE,CAAC;CACJ","sourcesContent":["import { RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\n\r\n/**\r\n * @experimental\r\n * Performs a bitwise AND operation on two numbers.\r\n */\r\nexport class FlowGraphBitwiseAndBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left & right);\r\n    }\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Performs a bitwise OR operation on two numbers.\r\n */\r\nexport class FlowGraphBitwiseOrBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left | right);\r\n    }\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Performs a bitwise XOR operation on two numbers.\r\n */\r\nexport class FlowGraphBitwiseXorBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left ^ right);\r\n    }\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Performs a bitwise NOT operation on a number.\r\n */\r\nexport class FlowGraphBitwiseNotBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (value) => ~value);\r\n    }\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Left shifts a number by a specified amount.\r\n */\r\nexport class FlowGraphBitwiseLeftShiftBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left << right);\r\n    }\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Right shifts a number by a specified amount.\r\n */\r\nexport class FlowGraphBitwiseRightShiftBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left >> right);\r\n    }\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Counts the leading zero bits of a number\r\n */\r\nexport class FlowGraphCountLeadingZerosBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (value) => Math.clz32(value));\r\n    }\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Counts the trailing zero bits of a number\r\n */\r\nexport class FlowGraphCountTrailingZerosBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    // from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32#implementing_count_leading_ones_and_beyond\r\n    private _ctrz(integer: number) {\r\n        integer >>>= 0; // coerce to Uint32\r\n        if (integer === 0) {\r\n            // skipping this step would make it return -1\r\n            return 32;\r\n        }\r\n        integer &= -integer; // equivalent to `int = int & (~int + 1)`\r\n        return 31 - Math.clz32(integer);\r\n    }\r\n\r\n    constructor() {\r\n        super(RichTypeNumber, RichTypeNumber, (value) => this._ctrz(value));\r\n    }\r\n}\r\n"]}