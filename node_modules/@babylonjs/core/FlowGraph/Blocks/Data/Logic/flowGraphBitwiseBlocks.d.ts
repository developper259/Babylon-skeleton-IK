import { FlowGraphBinaryOperationBlock } from "../flowGraphBinaryOperationBlock";
import { FlowGraphUnaryOperationBlock } from "../flowGraphUnaryOperationBlock";
/**
 * @experimental
 * Performs a bitwise AND operation on two numbers.
 */
export declare class FlowGraphBitwiseAndBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor();
}
/**
 * @experimental
 * Performs a bitwise OR operation on two numbers.
 */
export declare class FlowGraphBitwiseOrBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor();
}
/**
 * @experimental
 * Performs a bitwise XOR operation on two numbers.
 */
export declare class FlowGraphBitwiseXorBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor();
}
/**
 * @experimental
 * Performs a bitwise NOT operation on a number.
 */
export declare class FlowGraphBitwiseNotBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor();
}
/**
 * @experimental
 * Left shifts a number by a specified amount.
 */
export declare class FlowGraphBitwiseLeftShiftBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor();
}
/**
 * @experimental
 * Right shifts a number by a specified amount.
 */
export declare class FlowGraphBitwiseRightShiftBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor();
}
/**
 * @experimental
 * Counts the leading zero bits of a number
 */
export declare class FlowGraphCountLeadingZerosBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor();
}
/**
 * @experimental
 * Counts the trailing zero bits of a number
 */
export declare class FlowGraphCountTrailingZerosBlock extends FlowGraphUnaryOperationBlock<number, number> {
    private _ctrz;
    constructor();
}
