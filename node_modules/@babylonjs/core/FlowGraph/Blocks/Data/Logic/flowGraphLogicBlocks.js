import { RichTypeBoolean } from "../../../flowGraphRichTypes.js";
import { FlowGraphBinaryOperationBlock } from "../flowGraphBinaryOperationBlock.js";
import { FlowGraphUnaryOperationBlock } from "../flowGraphUnaryOperationBlock.js";
/**
 * Performs an AND operation on two boolean values.
 * @experimental
 */
export class FlowGraphLogicAndBlock extends FlowGraphBinaryOperationBlock {
    constructor() {
        super(RichTypeBoolean, RichTypeBoolean, RichTypeBoolean, (left, right) => left && right);
    }
}
/**
 * Performs an OR operation on two boolean values.
 * @experimental
 */
export class FlowGraphLogicOrBlock extends FlowGraphBinaryOperationBlock {
    constructor() {
        super(RichTypeBoolean, RichTypeBoolean, RichTypeBoolean, (left, right) => left || right);
    }
}
/**
 * Performs a NOT operation on a boolean value
 * @experimental
 */
export class FlowGraphLogicNotBlock extends FlowGraphUnaryOperationBlock {
    constructor() {
        super(RichTypeBoolean, RichTypeBoolean, (value) => !value);
    }
}
//# sourceMappingURL=flowGraphLogicBlocks.js.map