{"version":3,"file":"flowGraphSetPropertyBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Execution/flowGraphSetPropertyBlock.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAC;AAGvE,OAAO,EAAE,iCAAiC,EAAE,MAAM,yCAAyC,CAAC;AAE5F;;;;GAIG;AACH,MAAM,OAAO,yBAA2C,SAAQ,iCAAiC;IAe7F;QACI,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC7D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QACpE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IAC/D,CAAC;IAEO,YAAY,CAAC,MAAW,EAAE,QAAgB,EAAE,KAAU;QAC1D,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEtC,IAAI,aAAa,GAAG,MAAM,CAAC;QAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3C,aAAa,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/C;QAED,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;IAC3D,CAAC;IAEM,QAAQ,CAAC,OAAyB;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAE3C,IAAI,MAAM,IAAI,QAAQ,IAAI,KAAK,EAAE;YAC7B,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACzD;QAED,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;CACJ","sourcesContent":["import { RichTypeString, RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { FlowGraphWithOnDoneExecutionBlock } from \"../../flowGraphWithOnDoneExecutionBlock\";\r\n\r\n/**\r\n * @experimental\r\n * Block that sets a property on a target object.\r\n * TODO: Add support for animating the property.\r\n */\r\nexport class FlowGraphSetPropertyBlock<TargetT, ValueT> extends FlowGraphWithOnDoneExecutionBlock {\r\n    /**\r\n     * Input connection: The target object.\r\n     */\r\n    public readonly target: FlowGraphDataConnection<TargetT>;\r\n    /**\r\n     * Input connection: The property to set on the object.\r\n     * Supports dot notation.\r\n     */\r\n    public readonly property: FlowGraphDataConnection<string>;\r\n    /**\r\n     * Input connection: The value to set on the property.\r\n     */\r\n    public readonly value: FlowGraphDataConnection<ValueT>;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.target = this._registerDataInput(\"target\", RichTypeAny);\r\n        this.property = this._registerDataInput(\"property\", RichTypeString);\r\n        this.value = this._registerDataInput(\"value\", RichTypeAny);\r\n    }\r\n\r\n    private _setProperty(target: any, property: string, value: any): void {\r\n        const splitProp = property.split(\".\");\r\n\r\n        let currentTarget = target;\r\n        for (let i = 0; i < splitProp.length - 1; i++) {\r\n            currentTarget = currentTarget[splitProp[i]];\r\n        }\r\n\r\n        currentTarget[splitProp[splitProp.length - 1]] = value;\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        const target = this.target.getValue(context);\r\n        const property = this.property.getValue(context);\r\n        const value = this.value.getValue(context);\r\n\r\n        if (target && property && value) {\r\n            this._setProperty(target, property, value);\r\n        } else {\r\n            throw new Error(\"Invalid target, property or value.\");\r\n        }\r\n\r\n        this.onDone._activateSignal(context);\r\n    }\r\n}\r\n"]}