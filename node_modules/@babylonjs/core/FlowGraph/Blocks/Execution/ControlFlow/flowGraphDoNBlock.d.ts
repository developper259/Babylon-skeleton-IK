import type { FlowGraphContext } from "../../../flowGraphContext";
import type { FlowGraphDataConnection } from "../../../flowGraphDataConnection";
import type { FlowGraphSignalConnection } from "../../../flowGraphSignalConnection";
import { FlowGraphWithOnDoneExecutionBlock } from "../../../flowGraphWithOnDoneExecutionBlock";
/**
 * A block that executes a branch a set number of times.
 * @experimental
 */
export declare class FlowGraphDoNBlock extends FlowGraphWithOnDoneExecutionBlock {
    /**
     * Input connection: Resets the counter
     */
    readonly reset: FlowGraphSignalConnection;
    /**
     * Input connection: The maximum number of times the block can be executed.
     */
    readonly maxNumberOfExecutions: FlowGraphDataConnection<number>;
    /**
     * Output connection: The number of times the block has been executed.
     */
    readonly currentCount: FlowGraphDataConnection<number>;
    constructor();
    _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void;
}
