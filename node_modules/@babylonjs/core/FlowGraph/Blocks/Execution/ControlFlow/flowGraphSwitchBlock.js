import { FlowGraphExecutionBlock } from "../../../flowGraphExecutionBlock.js";
import { RichTypeAny } from "../../../flowGraphRichTypes.js";
/**
 * @experimental
 * A block that executes a branch based on a selection.
 */
export class FlowGraphSwitchBlock extends FlowGraphExecutionBlock {
    constructor(_config) {
        super();
        this._config = _config;
        /**
         * Output connection: The output flows.
         */
        this.outputFlows = [];
        this.selection = this._registerDataInput("selection", RichTypeAny);
        for (let i = 0; i <= this._config.cases.length; i++) {
            this.outputFlows.push(this._registerSignalOutput(`out${i}`));
        }
    }
    _execute(context, _callingSignal) {
        const selectionValue = this.selection.getValue(context);
        for (let i = 0; i < this._config.cases.length; i++) {
            if (selectionValue === this._config.cases[i]) {
                this.outputFlows[i]._activateSignal(context);
                return;
            }
        }
        // default case
        this.outputFlows[this.outputFlows.length - 1]._activateSignal(context);
    }
}
//# sourceMappingURL=flowGraphSwitchBlock.js.map