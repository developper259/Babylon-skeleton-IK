import { Vector2, Vector3, Vector4, Matrix, Quaternion } from "../Maths/math.vector.js";
import { Color3, Color4 } from "../Maths/math.color.js";
export const RichTypeAny = {
    typeName: "any",
    defaultValueBuilder: () => undefined,
};
export const RichTypeString = {
    typeName: "string",
    defaultValueBuilder: () => "",
};
export const RichTypeNumber = {
    typeName: "number",
    defaultValueBuilder: () => 0,
};
export const RichTypeBoolean = {
    typeName: "boolean",
    defaultValueBuilder: () => false,
};
export const RichTypeVector2 = {
    typeName: "Vector2",
    defaultValueBuilder: () => Vector2.Zero(),
};
export const RichTypeVector3 = {
    typeName: "Vector3",
    defaultValueBuilder: () => Vector3.Zero(),
};
export const RichTypeVector4 = {
    typeName: "Vector4",
    defaultValueBuilder: () => Vector4.Zero(),
};
export const RichTypeMatrix = {
    typeName: "Matrix",
    defaultValueBuilder: () => Matrix.Identity(),
};
export const RichTypeColor3 = {
    typeName: "Color3",
    defaultValueBuilder: () => Color3.Black(),
};
export const RichTypeColor4 = {
    typeName: "Color4",
    defaultValueBuilder: () => new Color4(0, 0, 0, 0),
};
export const RichTypeQuaternion = {
    typeName: "Quaternion",
    defaultValueBuilder: () => Quaternion.Identity(),
};
/**
 * Given a value, try to deduce its rich type.
 * @param value the value to deduce the rich type from
 * @returns the value's rich type, or RichTypeAny if the type could not be deduced.
 */
export function getRichTypeFromValue(value) {
    switch (typeof value) {
        case "string":
            return RichTypeString;
        case "number":
            return RichTypeNumber;
        case "boolean":
            return RichTypeBoolean;
        case "object":
            if (value instanceof Vector2) {
                return RichTypeVector2;
            }
            else if (value instanceof Vector3) {
                return RichTypeVector3;
            }
            else if (value instanceof Vector4) {
                return RichTypeVector4;
            }
            else if (value instanceof Color3) {
                return RichTypeColor3;
            }
            else if (value instanceof Color4) {
                return RichTypeColor4;
            }
            else if (value instanceof Quaternion) {
                return RichTypeQuaternion;
            }
            else {
                return RichTypeAny;
            }
        default:
            return RichTypeAny;
    }
}
//# sourceMappingURL=flowGraphRichTypes.js.map